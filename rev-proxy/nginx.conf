events {
    worker_connections  1024;
}
http {
    server {
        server_name ec2-mturk10-bak.r9n.net;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        location /vue/ {
            proxy_pass http://172.100.0.2/vue/;
            proxy_redirect off;
        }

        location /sockjs-node/ {
            proxy_pass http://172.100.0.2/sockjs-node/;
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /ducts/ws/ {
            proxy_pass http://host.docker.internal:8001/ducts/ws/;
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        location /ducts/ {
            proxy_pass http://host.docker.internal:8001/ducts/;
            proxy_redirect off;
        }
        location /static/ {
            proxy_pass http://host.docker.internal:8001/static/;
            proxy_redirect off;
        }
    

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/ec2-mturk10-bak.r9n.net/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/ec2-mturk10-bak.r9n.net/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot








}

    server {
    if ($host = ec2-mturk10-bak.r9n.net) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


        server_name ec2-mturk10-bak.r9n.net;
    listen 80;
    return 404; # managed by Certbot


}}
